classdef Convolution2DGPUStrategy < nnet.internal.cnn.layer.util.ExecutionStrategy
    % Convolution2DGPUStrategy   Execution strategy for running the convolution on the host
    
    %   Copyright 2016-2017 The MathWorks, Inc.
    
    methods
        function [Z, memory] = forward(~, X, ...
                weights, bias, ...
                topPad, leftPad, ...
                bottomPad, rightPad, ...
                verticalStride, horizontalStride)
            paddingSize = [topPad bottomPad leftPad rightPad];
            if iPaddingIsSymmetric(paddingSize)
                Z = nnet.internal.cnngpu.convolveForward2D( ...
                    X, weights, ...
                    topPad, leftPad, ...
                    bottomPad, rightPad, ...
                    verticalStride, horizontalStride) + bias;
            else
                X = iPadArray(X, paddingSize);
                Z = nnet.internal.cnngpu.convolveForward2D( ...
                    X, weights, ...
                    0, 0, ...
                    0, 0, ...
                    verticalStride, horizontalStride) + bias;
            end
            memory = [];
        end
        
        function [dX,dW] = backward(~, ...
                X, weights, dZ, ...
                topPad, leftPad, ...
                bottomPad, rightPad, ...
                strideHeight, strideWidth)
            paddingSize = [topPad bottomPad leftPad rightPad];
            needsWeightGradients = nargout > 1;
            if iPaddingIsSymmetric(paddingSize)
                dX = nnet.internal.cnngpu.convolveBackwardData2D( ...
                    X, weights, dZ, ...
                    topPad, leftPad, ...
                    bottomPad, rightPad, ...
                    strideHeight, strideWidth);
                if needsWeightGradients
                    dW{1} = nnet.internal.cnngpu.convolveBackwardFilter2D( ...
                        X, weights, dZ, ...
                        topPad, leftPad, ...
                        bottomPad, rightPad, ...
                        strideHeight, strideWidth);
                end
            else
                X = iPadArray(X, paddingSize);
                dX = nnet.internal.cnngpu.convolveBackwardData2D( ...
                    X, weights, dZ, ...
                    0, 0, ...
                    0, 0, ...
                    strideHeight, strideWidth);
                dX = iUnpadArray(dX, paddingSize);
                if needsWeightGradients
                    dW{1} = nnet.internal.cnngpu.convolveBackwardFilter2D( ...
                        X, weights, dZ, ...
                        0, 0, ...
                        0, 0, ...
                        strideHeight, strideWidth);
                end
            end
            if needsWeightGradients
                dW{2} = nnet.internal.cnngpu.convolveBackwardBias2D(dZ);
            end
        end
        
    end
end

function tf = iPaddingIsSymmetric(paddingSize)
tf = nnet.internal.cnn.layer.padding.isPaddingSymmetric(paddingSize);
end

function outputArray = iPadArray(inputArray, paddingSize)
outputArray = nnet.internal.cnn.layer.padding.padArray(inputArray, paddingSize);
end

function outputArray = iUnpadArray(inputArray, paddingSize)
outputArray = nnet.internal.cnn.layer.padding.unpadArray(inputArray, paddingSize);
end